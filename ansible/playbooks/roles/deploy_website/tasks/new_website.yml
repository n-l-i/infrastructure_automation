---
- name: new_website | Ensure the SSH keys are present
  block:
  - name: new_website | Ensure the public SSH key is present
    ansible.builtin.copy:
      src: '../secrets/ssh_keys/id_ed25519_{{ inventory_hostname }}.pub'
      dest: ~/.ssh/id_ed25519.pub
      mode: '0600'

  - name: new_website | Ensure the private SSH key is present
    ansible.builtin.copy:
      src: '../secrets/ssh_keys/id_ed25519_{{ inventory_hostname }}'
      dest: ~/.ssh/id_ed25519
      mode: '0600'

  - name: new_website | Ensure the SSH agent is running
    block:
    - name: new_website | Check if SSH agent is running
      ansible.builtin.command:
        cmd: pgrep -u $USER ssh-agent
      register: ssh_agent_already_running_result
      changed_when: false
      failed_when: false

    - name: new_website | Start SSH agent if not running
      when: ssh_agent_already_running_result.stdout == ""
      ansible.builtin.shell:
        cmd: eval "$(ssh-agent -s)"
      register: ssh_agent_result
      changed_when: true

    - name: new_website | Start SSH agent if not running
      when: ssh_agent_already_running_result.stdout == ""
      ansible.builtin.shell:
        cmd: eval "$(ssh-agent -s)"
      register: ssh_agent_result
      changed_when: true

- name: new_website | Ensure the Git repository is present
  block:
    - name: new_website | Determine if Git repository is already present
      ansible.builtin.stat:
        path: ~/devops_project
      register: git_repo_present_result
      changed_when: false

    - name: new_website | Ensure GitHub SSH key is considered known
      when: not git_repo_present_result.stat.exists
      ansible.builtin.copy:
        dest: ~/.ssh/known_hosts
        content: >
          |1|Mes8pMExqp/7HeiRDpYaRCviddg=|YSDEj0BAYS9Vod6yg8CgAbmDc5c=
          ssh-ed25519
          AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        mode: '0644'
      register: add_github_ssh_key_result
      changed_when: add_github_ssh_key_result is changed

    - name: new_website | Clone the Git repository if not present
      when: not git_repo_present_result.stat.exists
      ansible.builtin.command:
        cmd: git clone git@github.com:n-l-i/devops_project.git ~/devops_project
      register: git_clone_result
      changed_when: true

- name: new_website | Ensure the Git repository is up to date
  ansible.builtin.command:
    cmd: git pull
    chdir: ~/devops_project
  register: git_pull_result
  changed_when: git_pull_result.stdout != ""

- name: new_website | Ensure the secrets are present
  block:
    - name: new_website | Ensure the backend secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/backend/secrets
        src: ../secrets/new_website_secrets/backend/

    - name: new_website | Ensure the database secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/database/secrets
        src: ../secrets/new_website_secrets/database/

    - name: new_website | Ensure the frontend secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/frontend/secrets
        src: ../secrets/new_website_secrets/frontend/

    - name: new_website | Ensure the identity_provider secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/identity_provider/secrets
        src: ../secrets/new_website_secrets/identity_provider/

    - name: new_website | Ensure the load_balancer secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/load_balancer/secrets
        src: ../secrets/new_website_secrets/load_balancer/

    - name: new_website | Ensure the train_planner backend secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/projects/train_planner/backend/secrets
        src: ../secrets/new_website_secrets/train_planner_backend/

    - name: new_website | Ensure the train_planner frontend secrets are present
      ansible.builtin.copy:
        dest: ~/devops_project/projects/train_planner/frontend/secrets
        src: ../secrets/new_website_secrets/train_planner_frontend/

- name: new_website | Ensure Docker's official repository is available
  block:
  - name: new_website | Ensure apt cache is up to date
    ansible.builtin.apt:
      update_cache: yes
    become: true

  - name: new_website | Ensure GPG key dependencies are installed
    ansible.builtin.apt:
      pkg:
      - ca-certificates
      - curl
      state: present
    become: true

  - name: new_website | Ensure Docker's official GPG key is installed
    ansible.builtin.shell:
      cmd: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
    become: true
    # TODO: Use ansible.builtin.get_url instead of curl?
    # TODO: Use ansible.builtin.file instead of install?
    # TODO: Use ansible.builtin.command instead of shell?
    # TODO: Specify changed_when

  - name: new_website | Ensure Docker's official repository is added to Apt sources
    ansible.builtin.shell:
      cmd: >
        echo
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |
        tee /etc/apt/sources.list.d/docker.list > /dev/null
    become: true
    # TODO: Specify changed_when

  - name: new_website | Ensure apt cache is up to date
    ansible.builtin.apt:
      update_cache: yes
    become: true

  - name: new_website | Ensure Docker engine is installed
    ansible.builtin.apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      state: present
    become: true

- name: new_website | Ensure port 80 is open
  ansible.builtin.command:
    cmd: ufw allow 80
  register: open_port_80_result
  become: true
  changed_when: '"Rules updated" in open_port_80_result.stdout'

- name: new_website | Ensure port 443 is open
  ansible.builtin.command:
    cmd: ufw allow 443
  register: open_port_443_result
  become: true
  changed_when: '"Rules updated" in open_port_443_result.stdout'

- name: new_website | Ensure the website is running
  block:
  - name: new_website | Determine if the website is already reachable locally
    ansible.builtin.command:
      cmd: >
        curl -sSfk
        --resolve {{ lookup("env", "DOMAIN_NAME_WEBSITE") }}:443:127.0.0.1
        https://{{ lookup("env", "DOMAIN_NAME_WEBSITE") }}
    register: website_already_reachable_result
    ignore_errors: true
    failed_when: false
    changed_when: false

  - name: new_website | Start the website
    when: website_already_reachable_result.rc != 0
    block:
    - name: new_website | Start the load_balancer
      ansible.builtin.command:
        cmd: bash load_balancer/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the backend
      ansible.builtin.command:
        cmd: bash backend/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the database
      ansible.builtin.command:
        cmd: bash database/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the frontend
      ansible.builtin.command:
        cmd: bash frontend/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the identity_provider
      ansible.builtin.command:
        cmd: bash identity_provider/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the train_planner backend
      ansible.builtin.command:
        cmd: bash projects/train_planner/backend/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

    - name: new_website | Start the train_planner frontend
      ansible.builtin.command:
        cmd: bash projects/train_planner/frontend/local_clean_run.sh
        chdir: /home/serveruser/devops_project
      changed_when: true
      become: true

  - name: new_website | Ensure the website is reachable locally
    when: website_already_reachable_result.rc != 0
    ansible.builtin.command:
      cmd: >
        curl -sSfk
        --resolve {{ lookup("env", "DOMAIN_NAME_WEBSITE") }}:443:127.0.0.1
        https://{{ lookup("env", "DOMAIN_NAME_WEBSITE") }}
    register: website_reachable_result
    until: website_reachable_result.rc == 0
    retries: 120
    delay: 1
    changed_when: false
