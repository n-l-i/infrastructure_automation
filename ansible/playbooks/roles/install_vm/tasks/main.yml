---
- name: Fail if not Debian host
  when: ansible_os_family != "Debian"
  ansible.builtin.fail:
    msg: VM installation not implemented.

- name: Set VM OS fact
  ansible.builtin.set_fact:
    vm_os: >-
      {{
        'ubuntu' if vm_name.startswith('ubuntu') else
        'freebsd' if vm_name.startswith('freebsd') else
        'arch' if vm_name.startswith('arch') else
        none
      }}

- name: Assert vm_os is not none
  ansible.builtin.assert:
    that: vm_os is not none
    fail_msg: 'vm_os was not set'

- name: Ensure Ubuntu image is up to date
  when: vm_os == 'ubuntu'
  block:
  - name: Ensure Ubuntu image is up to date
    ansible.builtin.include_tasks:
      file: generate_images/ubuntu.yml

  - name: Fail if ubuntu_image_changed is not set
    ansible.builtin.assert:
      that: ubuntu_image_changed is defined
      fail_msg: ubuntu_image_changed was not set by generate_images/ubuntu.yml

- name: Ensure FreeBSD image is up to date
  when: vm_os == 'freebsd'
  block:
  - name: Ensure FreeBSD image is up to date
    ansible.builtin.include_tasks:
      file: generate_images/freebsd.yml

  - name: Fail if freebsd_image_changed is not set
    ansible.builtin.assert:
      that: freebsd_image_changed is defined
      fail_msg: freebsd_image_changed was not set by generate_images/freebsd.yml

- name: Ensure Arch image is up to date
  when: vm_os == 'arch'
  block:
  - name: Ensure Arch image is up to date
    ansible.builtin.include_tasks:
      file: generate_images/arch.yml

  - name: Fail if arch_image_changed is not set
    ansible.builtin.assert:
      that: arch_image_changed is defined
      fail_msg: arch_image_changed was not set by generate_images/arch.yml

- name: Set os_image_changed fact
  ansible.builtin.set_fact:
    os_image_changed: >-
      {{
        ubuntu_image_changed if vm_name.startswith('ubuntu') else
        freebsd_image_changed if vm_name.startswith('freebsd') else
        arch_image_changed if vm_name.startswith('arch') else
        none
      }}

- name: Assert os_image_changed is not none
  ansible.builtin.assert:
    that: os_image_changed is not none
    fail_msg: '[OS]_image_changed was not set by generate_images/[OS].yml'

- name: Determine if the VM is already running
  ansible.builtin.command:
    cmd: 'virsh domstate {{ vm_name }}'
  register: vm_already_running_state_check
  changed_when: false
  failed_when: >
    vm_already_running_state_check.rc != 0 and
    "error: failed to get domain '" + vm_name + "'" not in vm_already_running_state_check.stderr

- name: Set 'create_vm' fact if a new VM should be created
  ansible.builtin.set_fact:
    create_vm: >-
      {{
        os_image_changed or
        (vm_already_running_state_check.rc != 0 and
        'running' not in vm_already_running_state_check.stderr)
      }}

- name: Start the VM
  when: not create_vm and "running" not in vm_already_running_state_check.stdout
  ansible.builtin.command:
    cmd: 'virsh start {{ vm_name }}'

- name: Ensure no outdated VM exists
  when: create_vm and vm_already_running_state_check.rc == 0
  block:
  - name: Shut down outdated VM
    ansible.builtin.command:
      cmd: 'virsh destroy {{ vm_name }}'
    register: vm_destroy
    changed_when: "'Domain \\''+ vm_name + '\\' destroyed' in vm_destroy.stdout"

  - name: Delete outdated VM
    ansible.builtin.command:
      cmd: 'virsh undefine {{ vm_name }}'
    register: vm_undefine
    changed_when: "'Domain \\''+ vm_name + '\\' has been undefined' in vm_undefine.stdout"

  #- name: Delete outdated VM's disk image
  #  ansible.builtin.file:
  #    path: /var/lib/libvirt/images/{{ vm_name }}.qcow2
  #    state: absent
  #  become: true

- name: Check for WSL via /proc/sys/kernel/osrelease
  ansible.builtin.slurp:
    src: /proc/sys/kernel/osrelease
  register: wsl_check

- name: Set 'wsl' fact if WSL detected
  ansible.builtin.set_fact:
    wsl: "{{ (wsl_check['content'] | b64decode).lower().find('microsoft') != -1 }}"

- name: Create Ubuntu VM
  when: create_vm and not wsl
  ansible.builtin.command:
    cmd: >
      virt-install
      --name {{ vm_name }}
      --ram 2048
      --vcpus 2
      --disk path=images/{{ vm_name }}.qcow2,format=qcow2
      --disk path=iso_files/{{ vm_os }}/seed.iso,device=cdrom
      --os-variant {{
        'ubuntu24.04' if vm_os == 'ubuntu' else
        'freebsd14.2' if vm_os == 'freebsd' else
        'archlinux' if vm_os == 'arch' else
        'unknown'
      }}
      --network bridge=br0,mac={{ hostvars[vm_name].mac_address }}
      --graphics none
      --noautoconsole
      --import
    chdir: /var/lib/libvirt
  become: true

- name: Create Ubuntu VM within WSL
  when: create_vm and wsl
  ansible.builtin.command:
    cmd: >
      virt-install
      --name {{ vm_name }}
      --ram 2048
      --vcpus 2
      --disk path=images/{{ vm_name }}.qcow2,format=qcow2
      --disk path=iso_files/{{ vm_os }}/seed.iso,device=cdrom
      --os-variant {{
        'ubuntu24.04' if vm_os == 'ubuntu' else
        'freebsd14.2' if vm_os == 'freebsd' else
        'archlinux' if vm_os == 'arch' else
        'unknown'
      }}
      --network network=vm-net,mac={{ hostvars[vm_name].mac_address }}
      --graphics none
      --noautoconsole
      --import
    chdir: /var/lib/libvirt
  become: true

- name: Wait for the VM to start up
  ansible.builtin.command:
    cmd: 'virsh domstate {{ vm_name }}'
  register: vm_startup_state_check
  until: '"running" in vm_startup_state_check.stdout'
  retries: 30
  delay: 1
  changed_when: false

- name: Determine the VM MAC address
  ansible.builtin.shell:
    cmd: >
      virsh domiflist {{ vm_name }} |
      tail -n +3 |
      awk '{print $5}'
  register: vm_mac_address
  changed_when: false

- name: Assert MAC address is correct
  ansible.builtin.assert:
    that:
      - vm_mac_address.stdout == hostvars[vm_name].mac_address
    fail_msg: "VM MAC address was not set correctly."

- name: Determine VM IP address
  when: not wsl
  ansible.builtin.shell: >
    ip neigh |
    grep -i {{ vm_mac_address.stdout }} |
    awk '{print $1}'
  register: vm_ip_address_non_wsl
  changed_when: false
  failed_when: >
    vm_ip_address_non_wsl.rc != 0 or
    vm_ip_address_non_wsl.stdout == ""
  # The VMs send TCP SYN packets via cron job every minute to populate the host
  # ARP table, so we should try for at least that long before failing.
  retries: 60
  delay: 2
  until: vm_ip_address_non_wsl.stdout != ""

- name: Determine VM IP address within WSL
  when: wsl
  ansible.builtin.shell:
    cmd: >
      virsh domifaddr {{ vm_name }} |
      grep ipv4 |
      awk '{print $4}' |
      sed 's;/.*;;'
  register: vm_ip_address_wsl
  changed_when: false
  failed_when: >
    vm_ip_address_wsl.rc != 0 or
    vm_ip_address_wsl.stdout == ""
  retries: 60
  delay: 2
  until: vm_ip_address_wsl.stdout != ""

- name: Set VM IP address fact
  ansible.builtin.set_fact:
    vm_ip_address: '{{ vm_ip_address_wsl.stdout if wsl else vm_ip_address_non_wsl.stdout }}'

- name: debug ip address
  ansible.builtin.debug:
    msg: "{{ vm_name }} has MAC address {{ vm_mac_address.stdout }}. Its IP address should be {{ hostvars[vm_name].ansible_host }} and is {{ vm_ip_address }}"

- name: Assert IP address is correct
  ansible.builtin.assert:
    that:
      - vm_ip_address == hostvars[vm_name].ansible_host
    fail_msg: "VM IP address was not set correctly."

- name: Wait for the guest to be reachable on SSH
  ansible.builtin.wait_for_connection:
    delay: 2
    timeout: 120
  delegate_to: '{{ vm_name }}'
