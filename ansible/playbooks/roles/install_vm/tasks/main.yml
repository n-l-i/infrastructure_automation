---
- name: Fail if not Debian host
  when: ansible_os_family != "Debian"
  ansible.builtin.fail:
    msg: VM installation not implemented.

- name: Ensure necessary packages are installed
  ansible.builtin.apt:
    pkg:
    - genisoimage
    - qemu-utils
    - iproute2
    state: present
  become: true

- name: Ensure ISO files are present
  block:
  - name: Ensure Ubuntu ISO files directory exists
    ansible.builtin.file:
      path: /var/lib/libvirt/iso_files/ubuntu
      state: directory
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
      mode: '0755'

  - name: Determine if Ubuntu base IMG file exists
    ansible.builtin.stat:
      path: /var/lib/libvirt/iso_files/ubuntu/noble-server-cloudimg-amd64.img
    register: ubuntu_base_img

  - name: Download Ubuntu base IMG file
    when: ubuntu_base_img.stat.exists == false
    ansible.builtin.get_url:
      url: https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img
      dest: /var/lib/libvirt/iso_files/ubuntu/noble-server-cloudimg-amd64.img
      mode: '0644'
    register: generate_seed_iso

  - name: Ensure Ubuntu seed ISO file is up to date
    block:
    - name: Copy user-data to remote host
      ansible.builtin.template:
        src: user-data.j2
        dest: /var/lib/libvirt/iso_files/ubuntu/user-data
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0644'
      register: user_data_template

    - name: Copy meta-data to remote host
      ansible.builtin.template:
        src: meta-data.j2
        dest: /var/lib/libvirt/iso_files/ubuntu/meta-data
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0644'
      register: meta_data_template

    - name: Generate Ubuntu seed ISO file
      when: user_data_template.changed or meta_data_template.changed
      ansible.builtin.command:
        cmd: >
          genisoimage
          -output noble-server-cloudimg-amd64_seed.iso
          -volid cidata
          -joliet -rock
          user-data
          meta-data
        chdir: /var/lib/libvirt/iso_files/ubuntu
      register: generate_seed_iso
      changed_when: true
      become: true

- name: Ensure Ubuntu image is up to date
  block:
  - name: Determine if Ubuntu image file exists
    ansible.builtin.stat:
      path: '/var/lib/libvirt/images/{{ vm_name }}.qcow2'
    register: ubuntu_image_exists

  - name: Create Ubuntu image
    when: >
      ubuntu_image_exists.stat.exists == false or
      (download_ubuntu_img.changed | default(false)) or
      (generate_seed_iso.changed | default(false))
    ansible.builtin.command:
      cmd: >
        qemu-img create
        -F qcow2
        -b ../iso_files/ubuntu/noble-server-cloudimg-amd64.img
        -f qcow2
        {{ vm_name }}.qcow2
      chdir: /var/lib/libvirt/images
    register: create_ubuntu_image
    become: true

- name: Determine if the VM is already running
  ansible.builtin.command:
    cmd: 'virsh domstate {{ vm_name }}'
  register: vm_already_running_state_check
  changed_when: false
  failed_when: >
    vm_already_running_state_check.rc != 0 and
    "error: failed to get domain '" + vm_name + "'" not in vm_already_running_state_check.stderr

- name: debug vm_already_running_state_check
  ansible.builtin.debug:
    msg: "{{ vm_already_running_state_check }}"

- name: Set 'create_vm' fact if a new VM should be created
  ansible.builtin.set_fact:
    create_vm: >
      (create_ubuntu_image.changed | default(false)) or
      vm_already_running_state_check.rc != 0 or
      "running" not in vm_already_running_state_check.stderr

- name: Start the VM
  when: not create_vm
  ansible.builtin.command:
    cmd: 'virsh start {{ vm_name }}'

- name: Check for WSL via /proc/sys/kernel/osrelease
  ansible.builtin.slurp:
    src: /proc/sys/kernel/osrelease
  register: wsl_check

- name: Set 'wsl' fact if WSL detected
  ansible.builtin.set_fact:
    wsl: "{{ (wsl_check['content'] | b64decode).lower().find('microsoft') != -1 }}"

- name: Create Ubuntu VM
  when: create_vm and not wsl
  ansible.builtin.command:
    cmd: >
      virt-install
      --name {{ vm_name }}
      --ram 2048
      --vcpus 2
      --disk path=images/{{ vm_name }}.qcow2,format=qcow2
      --disk path=iso_files/ubuntu/noble-server-cloudimg-amd64_seed.iso,device=cdrom
      --os-type linux
      --os-variant ubuntu24.04
      --network bridge=br0,mac={{ hostvars[vm_name].mac_address }}
      --graphics none
      --noautoconsole
      --import
    chdir: /var/lib/libvirt
  register: create_vm
  become: true

- name: Create Ubuntu VM within WSL
  when: create_vm and wsl
  ansible.builtin.command:
    cmd: >
      virt-install
      --name {{ vm_name }}
      --ram 2048
      --vcpus 2
      --disk path=images/{{ vm_name }}.qcow2,format=qcow2
      --disk path=iso_files/ubuntu/noble-server-cloudimg-amd64_seed.iso,device=cdrom
      --os-type linux
      --os-variant ubuntu24.04
      --network network=vm-net,mac={{ hostvars[vm_name].mac_address }}
      --graphics none
      --noautoconsole
      --import
    chdir: /var/lib/libvirt
  register: create_vm
  become: true

- name: Wait for the VM to start up
  ansible.builtin.command:
    cmd: 'virsh domstate {{ vm_name }}'
  register: vm_startup_state_check
  until: '"running" in vm_startup_state_check.stdout'
  retries: 30
  delay: 1
  changed_when: false

- name: Determine the VM MAC address
  ansible.builtin.shell:
    cmd: >
      virsh domiflist {{ vm_name }} |
      tail -n +3 |
      awk '{print $5}'
  register: vm_mac_address
  changed_when: false

- name: Determine VM IP address
  when: not wsl
  ansible.builtin.shell: >
    ip neigh |
    grep -i {{ vm_mac_address.stdout }} |
    awk '{print $1}'
  register: vm_ip_address_non_wsl
  changed_when: false
  failed_when: >
    vm_ip_address_non_wsl.rc != 0 or
    vm_ip_address_non_wsl.stdout == ""
  # The VMs send TCP SYN packets via cron job every minute to populate the host
  # ARP table, so we should try for at least that long before failing.
  retries: 60
  delay: 2
  until: vm_ip_address_non_wsl.stdout != ""

- name: Determine VM IP address within WSL
  when: wsl
  ansible.builtin.shell:
    cmd: >
      virsh domifaddr {{ vm_name }} |
      grep ipv4 |
      awk '{print $4}' |
      sed 's;/.*;;'
  register: vm_ip_address_wsl
  changed_when: false
  failed_when: >
    vm_ip_address_wsl.rc != 0 or
    vm_ip_address_wsl.stdout == ""
  retries: 60
  delay: 2
  until: vm_ip_address_wsl.stdout != ""

- name: Set VM IP address fact
  ansible.builtin.set_fact:
    vm_ip_address: "{{ vm_ip_address_wsl.stdout if wsl else vm_ip_address_non_wsl.stdout }}"

- name: Wait for SSH on the VM IP
  ansible.builtin.wait_for:
    host: '{{ vm_ip_address }}'
    port: 22
    timeout: 30
    state: started
