---
- name: Fail if not Debian host
  when: ansible_os_family != "Debian"
  ansible.builtin.fail:
    msg: KVM configuration not implemented.

- name: Determine hardware virtualization support
  ansible.builtin.shell:
    cmd: |
      lscpu | grep Virtualization: | sed 's/^.*: *//g'
  register: virtualization_support
  changed_when: false
  failed_when: virtualization_support.stdout == ""

- name: Ensure necessary packages are installed
  ansible.builtin.apt:
    pkg:
    - qemu-kvm
    - libvirt-daemon-system
    - libvirt-clients
    - virtinst
    - bridge-utils
    state: present
  become: true

#- name: Ensure libvirt service is running and enabled
#  ansible.builtin.service:
#    name: libvirtd
#    state: started
#    enabled: true
#  become: true

- name: Ensure ISO files directory exists
  ansible.builtin.file:
    path: /var/lib/libvirt/iso_files
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'
  become: true

- name: Ensure default bridge network is removed
  block:
  - name: Ensure default bridge network is stopped
    ansible.builtin.command:
      cmd: virsh net-destroy default
    register: default_bridge_destroyed
    changed_when: '"Network default destroyed" in default_bridge_destroyed.stdout'
    failed_when: >
      default_bridge_destroyed.rc != 0 and
      "Network not found: no network with matching name 'default'" not in default_bridge_destroyed.stderr

  - name: Ensure default bridge network is undefined
    ansible.builtin.command:
      cmd: virsh net-undefine default
    register: default_bridge_undefined
    changed_when: |
      'Network default has been undefined' in default_bridge_undefined.stdout
    failed_when: >
      default_bridge_undefined.rc != 0 and
      "Network not found: no network with matching name 'default'" not in default_bridge_undefined.stderr

- name: Check for WSL via /proc/sys/kernel/osrelease
  ansible.builtin.slurp:
    src: /proc/sys/kernel/osrelease
  register: wsl_check

- name: Set 'wsl' fact if WSL detected
  ansible.builtin.set_fact:
    wsl: "{{ (wsl_check['content'] | b64decode).lower().find('microsoft') != -1 }}"

- name: Ensure bridge network configuration is up to date
  when: not wsl
  block:
  - name: Ensure br0 bind configuration is up to date
    ansible.builtin.copy:
      src: 1-br0-bind.network
      dest: /etc/systemd/network/1-br0-bind.network
      owner: root
      group: root
      mode: '0644'
    register: update_file_br0_bind_network
    become: true

  - name: Ensure br0 DHCP configuration is up to date
    ansible.builtin.copy:
      src: 2-br0-dhcp.network
      dest: /etc/systemd/network/2-br0-dhcp.network
      owner: root
      group: root
      mode: '0644'
    register: update_file_br0_dhcp_network
    become: true

  - name: Ensure br0 netdev configuration is up to date
    ansible.builtin.copy:
      src: br.netdev
      dest: /etc/systemd/network/br.netdev
      owner: root
      group: root
      mode: '0644'
    register: update_file_br_netdev
    become: true

  - name: Apply network configuration
    when: update_file_br0_bind_network.changed or update_file_br0_dhcp_network.changed or update_file_br_netdev.changed
    block:
    - name: Reload systemd unit files (detect new configs)
      ansible.builtin.command: systemctl daemon-reload
      changed_when: true
      become: true

    - name: Reload systemd-networkd configuration
      ansible.builtin.command: networkctl reload
      changed_when: true
      become: true

- name: Ensure NAT network configuration is up to date
  when: wsl
  block:
  - name: Install required packages (uuid-runtime for uuidgen)
    ansible.builtin.package:
      name: uuid-runtime
      state: present
    become: true

  - name: Generate UUID for vm-net
    ansible.builtin.command: uuidgen
    register: vm_net_uuid
    changed_when: false
    become: true

  - name: Create vm-net.xml file
    ansible.builtin.copy:
      dest: /tmp/vm-net.xml
      content: |
        <network>
          <name>vm-net</name>
          <uuid>{{ vm_net_uuid.stdout }}</uuid>
          <forward mode='nat'/>
          <bridge name='virbr1' stp='on' delay='0'/>
          <ip address='192.168.100.1' netmask='255.255.255.0'>
            <dhcp>
              <range start='192.168.100.100' end='192.168.100.200'/>
            </dhcp>
          </ip>
        </network>
    become: true

  - name: Define vm-net network in libvirt
    ansible.builtin.command:
      cmd: virsh net-define /tmp/vm-net.xml
    args:
      creates: /etc/libvirt/qemu/networks/vm-net.xml
    become: true

  - name: Start vm-net network
    ansible.builtin.command:
      cmd: virsh net-start vm-net
    register: net_start_result
    failed_when: net_start_result.rc != 0 and 'already active' not in net_start_result.stderr
    become: true

  - name: Autostart vm-net network
    ansible.builtin.command:
      cmd: virsh net-autostart vm-net
    become: true
