---
- name: Fail if not Debian host
  when: ansible_os_family != "Debian"
  ansible.builtin.fail:
    msg: KVM configuration not implemented.

- name: Determine hardware virtualization support
  ansible.builtin.shell:
    cmd: |
      lscpu | grep Virtualization: | sed 's/^.*: *//g'
  register: virtualization_support
  changed_when: false
  failed_when: virtualization_support.stdout == ""

- name: Ensure packages necessary for KVM are installed
  ansible.builtin.apt:
    pkg:
    - qemu-kvm
    - libvirt-daemon-system
    - libvirt-clients
    - virtinst
    - bridge-utils
    state: present
  become: true

- name: Ensure packages necessary for VM installation are installed
  ansible.builtin.apt:
    pkg:
    - genisoimage
    - qemu-utils
    - iproute2
    state: present
  become: true

- name: Ensure ISO files directory exists
  ansible.builtin.file:
    path: /var/lib/libvirt/iso_files
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'
  become: true

- name: Ensure default bridge network is removed
  block:
  - name: Ensure default bridge network is stopped
    ansible.builtin.command:
      cmd: virsh net-destroy default
    register: default_bridge_destroyed
    changed_when: '"Network default destroyed" in default_bridge_destroyed.stdout'
    failed_when: >
      default_bridge_destroyed.rc != 0 and
      "Network not found: no network with matching name 'default'" not in default_bridge_destroyed.stderr

  - name: Ensure default bridge network is undefined
    ansible.builtin.command:
      cmd: virsh net-undefine default
    register: default_bridge_undefined
    changed_when: |
      'Network default has been undefined' in default_bridge_undefined.stdout
    failed_when: >
      default_bridge_undefined.rc != 0 and
      "Network not found: no network with matching name 'default'" not in default_bridge_undefined.stderr

- name: Check for WSL via /proc/sys/kernel/osrelease
  ansible.builtin.slurp:
    src: /proc/sys/kernel/osrelease
  register: wsl_check

- name: Set 'wsl' fact if WSL detected
  ansible.builtin.set_fact:
    wsl: "{{ (wsl_check['content'] | b64decode).lower().find('microsoft') != -1 }}"

- name: Ensure bridge network configuration is up to date
  when: not wsl
  block:
  - name: Ensure br0 bind configuration is up to date
    ansible.builtin.copy:
      src: 1-br0-bind.network
      dest: /etc/systemd/network/1-br0-bind.network
      owner: root
      group: root
      mode: '0644'
    register: update_file_br0_bind_network
    become: true

  - name: Ensure br0 DHCP configuration is up to date
    ansible.builtin.copy:
      src: 2-br0-dhcp.network
      dest: /etc/systemd/network/2-br0-dhcp.network
      owner: root
      group: root
      mode: '0644'
    register: update_file_br0_dhcp_network
    become: true

  - name: Ensure br0 netdev configuration is up to date
    ansible.builtin.copy:
      src: br.netdev
      dest: /etc/systemd/network/br.netdev
      owner: root
      group: root
      mode: '0644'
    register: update_file_br_netdev
    become: true

  - name: Apply network configuration
    when: update_file_br0_bind_network.changed or update_file_br0_dhcp_network.changed or update_file_br_netdev.changed
    block:
    - name: Reload systemd unit files (detect new configs)
      ansible.builtin.command: systemctl daemon-reload
      changed_when: true
      become: true

    - name: Reload systemd-networkd configuration
      ansible.builtin.command: networkctl reload
      changed_when: true
      become: true

- name: Ensure NAT network configuration is up to date
  when: wsl
  block:
  - name: Remove old vm-net xml configuration if it exists
    ansible.builtin.file:
      path: /tmp/vm-net.xml
      state: absent
    changed_when: false

  - name: Determine if NAT network is already defined
    ansible.builtin.shell:
      cmd: >
        virsh net-list |
        grep "^ vm-net " |
        awk '{print $1}'
    register: vm_net_already_defined
    changed_when: false
    failed_when: >
      vm_net_already_defined.rc != 0 and
      vm_net_already_defined.stdout != ""

  - name: Create vm-net xml configuration if not already defined
    when: vm_net_already_defined.stdout == ""
    ansible.builtin.copy:
      src: vm-net.xml
      dest: /tmp/vm-net.xml
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
      mode: '0664'

  - name: Ensure vm-net configuration is up to date
    when: vm_net_already_defined.stdout != ""
    block:
    - name: Capture current vm-net xml configuration
      ansible.builtin.shell:
        cmd: virsh net-dumpxml vm-net --inactive > /tmp/vm-net.xml
      changed_when: false

    - name: Ensure vm-net configuration is up to date
      ansible.builtin.copy:
        src: vm-net.xml
        dest: /tmp/vm-net.xml
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0664'
      register: update_file_vm_net_xml

  - name: Define vm-net network in libvirt
    when: >
      vm_net_already_defined.stdout == "" or
      update_file_vm_net_xml.changed
    ansible.builtin.command:
      cmd: virsh net-define /tmp/vm-net.xml
    become: true

  - name: Remove vm-net xml configuration when done with it
    ansible.builtin.file:
      path: /tmp/vm-net.xml
      state: absent
    changed_when: false

  - name: Start vm-net network
    ansible.builtin.command:
      cmd: virsh net-start vm-net
    register: net_start_result
    failed_when: net_start_result.rc != 0 and 'already active' not in net_start_result.stderr
    changed_when: net_start_result.rc == 0
    become: true

  - name: Determine if NAT network is already autostarted
    ansible.builtin.shell:
      cmd: >
        virsh net-list |
        grep "^ vm-net " |
        awk '{print $3}'
    register: vm_net_already_autostarted
    changed_when: false
    failed_when: >
      vm_net_already_autostarted.rc != 0 or
      vm_net_already_autostarted.stdout == ""

  - name: Autostart vm-net network
    when: vm_net_already_autostarted.stdout != "yes"
    ansible.builtin.command:
      cmd: virsh net-autostart vm-net
    become: true
